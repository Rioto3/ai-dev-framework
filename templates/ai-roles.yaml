# AI役割定義ファイル
# プロジェクトごとにコピー・編集して使用

project: "sample-project"
description: "サンプルプロジェクトの説明"

# 基本設定
complexity: "standard"  # mvp | standard | complex
priority: "ux-first"    # ux優先、基本は並行作業

# AI役割定義
roles:
  ux-ai:
    responsibility: "ユーザー体験設計・プロジェクト統括・JSXモック作成・ルーティング管理・文書作成"
    input: "要件整理済み仕様書"
    output: 
      - "Next.js JSXコンポーネント"
      - "Builder.io連携設計"
      - "ルーティング設計"
      - "機能要件定義"
      - "Backend-AI向け指示書"
      - "README・技術文書"
    tools: ["Next.js", "JSX", "Builder.io", "GitHub", "Markdown"]
    authority: "leader"
    decisions:
      - "単独完結 vs 分業判断"
      - "リポジトリ・ブランチ管理"
      - "完了基準設定"
    
  backend-ai:
    responsibility: "分野特化実装・DB設計・API設計・SaaS連携・決済・外部リソース管理"
    input: "UX-AIの機能要件・データ要求"
    output:
      - "FastAPI実装"
      - "データベース設計書"
      - "API仕様書（OpenAPI）"
      - "SaaS統合設計"
      - "セキュリティ設計"
    tools: ["FastAPI", "SQL", "REST/GraphQL", "Firebase", "Stripe", "AWS"]
    activation: "UX-AIが複雑ロジック・データ管理必要と判断時"

# モダンフロントエンド統合
frontend:
  technology: "Next.js + Builder.io + Figma"
  workflow:
    1: "UX-AI JSX作成"
    2: "Builder.io連携・Figma統合"
    3: "デザイン調整"
    4: "コードベース更新"
  external_tools:
    - "Figma (高級デザイン)"
    - "Builder.io (双方向変換)"
    - "Vercel (デプロイ)"

# 作業管理（軽量運用）
workflow:
  repository_setup:
    1: "リポジトリ作成（main）"
    2: "develop ブランチ派生"
    3: "基本README + ai-roles.yaml配置"
  
  development:
    1: "UX-AI統括・判断"
    2: "develop で主要作業"
    3: "大機能時のみ feature ブランチ派生"
    4: "コミットログで進捗管理"
  
  collaboration:
    - "小規模: UX-AI単独、コミットログ管理"
    - "中規模: 必要時のみ分業・Issue使用" 
    - "大規模: 従来のIssue連携フロー"

# プロジェクト設定
github:
  repository: "owner/repo-name"
  main-branch: "main"
  work-branch: "develop"
  feature-prefix: "feature/"
  
# デプロイ設定
deployment:
  frontend: "Vercel"
  backend: "任意サーバ"
  api_connection: "人間統合"